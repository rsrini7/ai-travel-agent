import os
import json
import uuid # For unique filenames
from datetime import datetime # For timestamp in filenames
from dotenv import load_dotenv

if load_dotenv():
    print("APP.PY: .env file loaded successfully.")
else:
    print("APP.PY: .env file not found.")

import streamlit as st
from supabase_utils import (
    add_enquiry, get_enquiries, get_enquiry_by_id,
    add_itinerary, get_itinerary_by_enquiry_id,
    add_vendor_reply, get_vendor_reply_by_enquiry_id,
    add_quotation, update_quotation_storage_path, get_quotation_by_enquiry_id, # Quotation DB functions
    add_client, get_client_by_enquiry_id,
    upload_file_to_storage, get_public_url, create_signed_url # Storage functions
)
from llm_utils import generate_places_suggestion_llm, run_quotation_generation_graph
from docx_utils import convert_pdf_bytes_to_docx_bytes

# --- CONFIGURATION ---
QUOTATIONS_BUCKET_NAME = "quotations" # Make sure this matches your bucket name in Supabase

st.set_page_config(layout="wide")
st.title("ü§ñ AI-Powered Travel Automation MVP")

# Initialize session state variables
if 'selected_enquiry_id' not in st.session_state:
    st.session_state.selected_enquiry_id = None
if 'current_ai_suggestions' not in st.session_state:
    st.session_state.current_ai_suggestions = None
if 'current_ai_suggestions_id' not in st.session_state:
    st.session_state.current_ai_suggestions_id = None

# Tab 3 specific states
if 'selected_enquiry_id_tab3' not in st.session_state:
    st.session_state.selected_enquiry_id_tab3 = None
if 'tab3_enquiry_details' not in st.session_state:
    st.session_state.tab3_enquiry_details = None
if 'tab3_client_name' not in st.session_state:
    st.session_state.tab3_client_name = "Valued Client"
if 'tab3_itinerary_info' not in st.session_state:
    st.session_state.tab3_itinerary_info = None
if 'tab3_vendor_reply_info' not in st.session_state:
    st.session_state.tab3_vendor_reply_info = None

# For managing the currently generated/loaded quotation in Tab 3
if 'tab3_current_quotation_db_id' not in st.session_state:
    st.session_state.tab3_current_quotation_db_id = None
if 'tab3_current_pdf_storage_path' not in st.session_state:
    st.session_state.tab3_current_pdf_storage_path = None
if 'tab3_current_docx_storage_path' not in st.session_state:
    st.session_state.tab3_current_docx_storage_path = None

# For holding locally generated bytes for download buttons (current session)
if 'tab3_quotation_pdf_bytes' not in st.session_state:
    st.session_state.tab3_quotation_pdf_bytes = None
if 'tab3_quotation_docx_bytes' not in st.session_state:
    st.session_state.tab3_quotation_docx_bytes = None

if 'show_quotation_success_tab3' not in st.session_state: # General flag for quotation gen success message
    st.session_state.show_quotation_success_tab3 = False
if 'vendor_reply_saved_success_message' not in st.session_state: # For vendor reply success message
    st.session_state.vendor_reply_saved_success_message = None

if 'selected_ai_provider' not in st.session_state:
    st.session_state.selected_ai_provider = "OpenRouter" # Default

tab1, tab2, tab3 = st.tabs([
    "üìù New Enquiry",
    "üîç Manage Enquiries & Itinerary",
    "‚úçÔ∏è Add Vendor Reply & Generate Quotation"
])

# --- AI Provider Selection (Global Sidebar) ---
st.sidebar.subheader("‚öôÔ∏è AI Configuration")
ai_provider_options = ["Gemini", "OpenRouter"]
current_provider_index = ai_provider_options.index(st.session_state.selected_ai_provider) if st.session_state.selected_ai_provider in ai_provider_options else 0
selected_provider = st.sidebar.selectbox(
    "Select AI Provider:",
    options=ai_provider_options,
    index=current_provider_index,
    key="ai_provider_selector_sidebar"
)
if selected_provider != st.session_state.selected_ai_provider:
    st.session_state.selected_ai_provider = selected_provider
    st.rerun()
st.sidebar.caption(f"Using: {st.session_state.selected_ai_provider}")
if st.session_state.selected_ai_provider == "OpenRouter":
    openrouter_model = os.getenv("OPENROUTER_DEFAULT_MODEL", "google/gemini-flash-1.5")
    st.sidebar.caption(f"OpenRouter Model: {openrouter_model}")


with tab1: # New Enquiry
    st.header("1. Submit New Enquiry")
    with st.form("new_enquiry_form"):
        st.subheader("Travel Details")
        destination = st.text_input("Destination", placeholder="e.g., Paris, France")
        num_days = st.number_input("Number of Days", min_value=1, value=7)
        traveler_count = st.number_input("Number of Travelers", min_value=1, value=2)
        trip_type = st.selectbox("Trip Type", ["Leisure", "Business", "Adventure", "Honeymoon", "Family"])

        st.subheader("Client Information")
        client_name_input = st.text_input("Client Name", placeholder="John Doe")
        client_mobile_input = st.text_input("Mobile Number", placeholder="+91XXXXXXXXXX")
        client_city_input = st.text_input("City", placeholder="Mumbai")
        client_email_input = st.text_input("Email (optional)", placeholder="john@example.com")

        submitted_enquiry = st.form_submit_button("Submit Enquiry")
        if submitted_enquiry:
            if not destination:
                st.error("Destination is required.")
            elif not client_name_input or not client_mobile_input or not client_city_input:
                st.error("Client name, mobile and city are required.")
            else:
                with st.spinner("Submitting enquiry..."):
                    enquiry_data, error_msg = add_enquiry(destination, num_days, traveler_count, trip_type)
                    if enquiry_data:
                        client_data, client_error = add_client(
                            enquiry_id=enquiry_data['id'],
                            name=client_name_input,
                            mobile=client_mobile_input,
                            city=client_city_input,
                            email=client_email_input
                        )

                        if client_data:
                            st.success(f"Enquiry and client information submitted successfully! ID: {enquiry_data['id']}")
                            # Reset relevant session states for a clean slate on other tabs
                            st.session_state.selected_enquiry_id = enquiry_data['id'] # For Tab 2
                            st.session_state.current_ai_suggestions = None
                            st.session_state.current_ai_suggestions_id = None
                            
                            st.session_state.selected_enquiry_id_tab3 = enquiry_data['id'] # Auto-select in Tab 3
                            st.session_state.tab3_enquiry_details = None # Force reload in Tab 3
                            st.session_state.tab3_client_name = client_name_input
                            st.session_state.tab3_itinerary_info = None
                            st.session_state.tab3_vendor_reply_info = None
                            st.session_state.tab3_quotation_pdf_bytes = None
                            st.session_state.tab3_quotation_docx_bytes = None
                            st.session_state.tab3_current_quotation_db_id = None
                            st.session_state.tab3_current_pdf_storage_path = None
                            st.session_state.tab3_current_docx_storage_path = None
                            st.session_state.show_quotation_success_tab3 = False
                            st.session_state.vendor_reply_saved_success_message = None
                        else:
                            st.error(f"Enquiry submitted (ID: {enquiry_data['id']}) but failed to save client information. {client_error if client_error else 'Unknown error'}")
                    else:
                        st.error(f"Failed to submit enquiry. {error_msg if error_msg else 'Unknown error'}")


with tab2: # Manage Enquiries & Itinerary
    st.header("2. Manage Enquiries & Generate Itinerary")
    enquiries_list_tab2, error_msg_enq_list_tab2 = get_enquiries()
    if error_msg_enq_list_tab2:
        st.error(f"Could not load enquiries: {error_msg_enq_list_tab2}")
        enquiries_list_tab2 = []

    if not enquiries_list_tab2:
        st.info("No enquiries found. Please submit one in the 'New Enquiry' tab.")
        st.session_state.selected_enquiry_id = None
    else:
        enquiry_options_tab2 = {f"{e['id'][:8]}... - {e['destination']} ({e['created_at'][:10]})": e['id'] for e in enquiries_list_tab2}

        # Ensure selected_enquiry_id is valid or default to the first one
        if st.session_state.selected_enquiry_id not in enquiry_options_tab2.values():
            st.session_state.selected_enquiry_id = list(enquiry_options_tab2.values())[0] if enquiry_options_tab2 else None

        current_selection_index_tab2 = 0
        if st.session_state.selected_enquiry_id and enquiry_options_tab2:
            try:
                current_selection_index_tab2 = list(enquiry_options_tab2.values()).index(st.session_state.selected_enquiry_id)
            except ValueError: # If ID is somehow invalid, default to first
                st.session_state.selected_enquiry_id = list(enquiry_options_tab2.values())[0]
                current_selection_index_tab2 = 0

        prev_selected_enquiry_id_tab2 = st.session_state.selected_enquiry_id
        selected_enquiry_label_tab2 = st.selectbox(
            "Select an Enquiry for Itinerary Generation:",
            options=list(enquiry_options_tab2.keys()),
            index=current_selection_index_tab2,
            key="enquiry_selector_tab2"
        )

        if selected_enquiry_label_tab2: # If a selection is made
            st.session_state.selected_enquiry_id = enquiry_options_tab2[selected_enquiry_label_tab2]

        if st.session_state.selected_enquiry_id != prev_selected_enquiry_id_tab2:
            st.session_state.current_ai_suggestions = None
            st.session_state.current_ai_suggestions_id = None
            st.rerun() # Rerun if selection changed

        if st.session_state.selected_enquiry_id:
            enquiry_id_tab2 = st.session_state.selected_enquiry_id
            enquiry_details_tab2, error_msg_details_tab2 = get_enquiry_by_id(enquiry_id_tab2)

            if enquiry_details_tab2:
                # Load itinerary if not already loaded for this enquiry in this tab
                if st.session_state.current_ai_suggestions is None or st.session_state.current_ai_suggestions_id is None or \
                   (st.session_state.get('itinerary_loaded_for_tab2') != enquiry_id_tab2): # Track which enquiry it's for
                    ai_suggestions_data_tab2, _ = get_itinerary_by_enquiry_id(enquiry_id_tab2)
                    if ai_suggestions_data_tab2:
                        st.session_state.current_ai_suggestions = ai_suggestions_data_tab2['itinerary_text']
                        st.session_state.current_ai_suggestions_id = ai_suggestions_data_tab2['id']
                    else:
                        st.session_state.current_ai_suggestions = None
                        st.session_state.current_ai_suggestions_id = None
                    st.session_state.itinerary_loaded_for_tab2 = enquiry_id_tab2


                st.subheader(f"Details for Enquiry: {enquiry_details_tab2['destination']} (ID: {enquiry_id_tab2[:8]}...)")
                st.markdown(f"""
                    - **Destination:** {enquiry_details_tab2['destination']}
                    - **Days:** {enquiry_details_tab2['num_days']}
                    - **Travelers:** {enquiry_details_tab2['traveler_count']}
                    - **Trip Type:** {enquiry_details_tab2['trip_type']}
                    - **Status:** {enquiry_details_tab2.get('status', 'New')}
                """)

                st.markdown("---")
                st.subheader(f"üí° AI Places/Attraction Suggestions (using {st.session_state.selected_ai_provider})")

                if st.session_state.current_ai_suggestions:
                    with st.expander("View AI Generated Suggestions", expanded=True):
                        st.markdown(st.session_state.current_ai_suggestions)
                else:
                    st.caption("No AI suggestions generated yet for this enquiry.")

                if st.button(f"Generate Places Suggestions with {st.session_state.selected_ai_provider}", key="gen_ai_suggestions_btn_tab2"):
                    with st.spinner(f"Generating AI suggestions with {st.session_state.selected_ai_provider}..."):
                        suggestions_text = generate_places_suggestion_llm(
                            enquiry_details_tab2,
                            provider=st.session_state.selected_ai_provider
                        )
                        if "Error:" not in suggestions_text and "Critical error" not in suggestions_text:
                            new_suggestion_record, error_msg_sugg_add = add_itinerary(enquiry_id_tab2, suggestions_text)
                            if new_suggestion_record:
                                st.session_state.current_ai_suggestions = suggestions_text
                                st.session_state.current_ai_suggestions_id = new_suggestion_record['id']
                                st.session_state.itinerary_loaded_for_tab2 = enquiry_id_tab2 # Mark it as loaded for current
                                st.session_state.vendor_reply_saved_success_message = "AI Place suggestions generated and saved successfully!" # Use the success flag
                                st.rerun()
                            else:
                                st.error(f"Failed to save AI suggestions: {error_msg_sugg_add or 'Unknown error'}")
                        else:
                            st.error(suggestions_text) # Show LLM error
            elif error_msg_details_tab2:
                 st.error(f"Could not load selected enquiry details: {error_msg_details_tab2}")
            else: # Enquiry details not found (e.g., if ID was deleted)
                 st.warning("Selected enquiry details could not be loaded or enquiry not found.")
        else:
            st.info("Select an enquiry to see details and generate itinerary.")


with tab3: # Add Vendor Reply & Generate Quotation
    st.header("3. Add Vendor Reply & Generate Quotation")

    # Display one-time messages if set (e.g., from vendor reply save or itinerary save from Tab 2)
    if st.session_state.get('vendor_reply_saved_success_message'):
        st.success(st.session_state.vendor_reply_saved_success_message)
        st.session_state.vendor_reply_saved_success_message = None # Clear after displaying

    enquiries_list_tab3, error_msg_enq_list_tab3 = get_enquiries()
    if error_msg_enq_list_tab3:
        st.error(f"Could not load enquiries for this tab: {error_msg_enq_list_tab3}")
        enquiries_list_tab3 = []

    if not enquiries_list_tab3:
        st.info("No enquiries available. Please submit one in the 'New Enquiry' tab.")
        st.session_state.selected_enquiry_id_tab3 = None
    else:
        enquiry_options_tab3 = {f"{e['id'][:8]}... - {e['destination']}": e['id'] for e in enquiries_list_tab3}

        if st.session_state.selected_enquiry_id_tab3 not in enquiry_options_tab3.values():
            st.session_state.selected_enquiry_id_tab3 = list(enquiry_options_tab3.values())[0] if enquiry_options_tab3 else None

        current_selection_index_tab3 = 0
        if st.session_state.selected_enquiry_id_tab3 and enquiry_options_tab3:
            try:
                current_selection_index_tab3 = list(enquiry_options_tab3.values()).index(st.session_state.selected_enquiry_id_tab3)
            except ValueError:
                st.session_state.selected_enquiry_id_tab3 = list(enquiry_options_tab3.values())[0]
                current_selection_index_tab3 = 0
        
        prev_selected_enquiry_id_tab3 = st.session_state.selected_enquiry_id_tab3
        selected_enquiry_label_tab3 = st.selectbox(
            "Select Enquiry for Vendor Reply & Quotation:",
            options=list(enquiry_options_tab3.keys()),
            index=current_selection_index_tab3,
            key="enquiry_selector_tab3"
        )

        if selected_enquiry_label_tab3:
            st.session_state.selected_enquiry_id_tab3 = enquiry_options_tab3[selected_enquiry_label_tab3]

        # This block executes if the selected enquiry ID for Tab 3 changes
        if st.session_state.selected_enquiry_id_tab3 != prev_selected_enquiry_id_tab3:
            st.session_state.tab3_enquiry_details = None # Flag for reload
            st.session_state.tab3_client_name = "Valued Client"
            st.session_state.tab3_itinerary_info = None
            st.session_state.tab3_vendor_reply_info = None
            st.session_state.tab3_quotation_pdf_bytes = None
            st.session_state.tab3_quotation_docx_bytes = None
            st.session_state.tab3_current_quotation_db_id = None
            st.session_state.tab3_current_pdf_storage_path = None
            st.session_state.tab3_current_docx_storage_path = None
            st.session_state.show_quotation_success_tab3 = False
            # vendor_reply_saved_success_message is cleared at top of tab, so no need here
            st.rerun()

        if st.session_state.selected_enquiry_id_tab3:
            active_enquiry_id_tab3 = st.session_state.selected_enquiry_id_tab3

            # --- START: Consolidated Data Loading for Tab 3 (if needed) ---
            # Load enquiry details if not already loaded for the current active_enquiry_id_tab3
            if st.session_state.tab3_enquiry_details is None or st.session_state.tab3_enquiry_details.get('id') != active_enquiry_id_tab3:
                # st.write(f"[DEBUG Tab3] Reloading data for enquiry: {active_enquiry_id_tab3}") # Debug
                details, _ = get_enquiry_by_id(active_enquiry_id_tab3)
                st.session_state.tab3_enquiry_details = details

                client_data_for_tab3, _ = get_client_by_enquiry_id(active_enquiry_id_tab3)
                st.session_state.tab3_client_name = client_data_for_tab3["name"] if client_data_for_tab3 and client_data_for_tab3.get("name") else "Valued Client"
                
                vendor_reply_data, _ = get_vendor_reply_by_enquiry_id(active_enquiry_id_tab3)
                st.session_state.tab3_vendor_reply_info = {
                    'text': vendor_reply_data['reply_text'] if vendor_reply_data else None,
                    'id': vendor_reply_data['id'] if vendor_reply_data else None,
                    'enquiry_id_loaded_for': active_enquiry_id_tab3 # Track for which enquiry this is loaded
                }
                # Also fetch latest quotation record paths when enquiry details are reloaded
                latest_quotation_record, _ = get_quotation_by_enquiry_id(active_enquiry_id_tab3)
                if latest_quotation_record:
                    st.session_state.tab3_current_quotation_db_id = latest_quotation_record.get('id')
                    st.session_state.tab3_current_pdf_storage_path = latest_quotation_record.get('pdf_storage_path')
                    st.session_state.tab3_current_docx_storage_path = latest_quotation_record.get('docx_storage_path')
                else: # No existing quotation, clear paths
                    st.session_state.tab3_current_quotation_db_id = None
                    st.session_state.tab3_current_pdf_storage_path = None
                    st.session_state.tab3_current_docx_storage_path = None

            # ALWAYS Fetch Itinerary for Tab 3 (as it might be updated by Tab 2)
            itinerary_data_tab3, _ = get_itinerary_by_enquiry_id(active_enquiry_id_tab3)
            if itinerary_data_tab3:
                st.session_state.tab3_itinerary_info = {
                    'text': itinerary_data_tab3['itinerary_text'],
                    'id': itinerary_data_tab3['id'],
                    'enquiry_id_loaded_for': active_enquiry_id_tab3
                }
            else:
                st.session_state.tab3_itinerary_info = {
                    'text': "No itinerary found in database for this enquiry.",
                    'id': None,
                    'enquiry_id_loaded_for': active_enquiry_id_tab3
                }
            # --- END: Consolidated Data Loading for Tab 3 ---

            if st.session_state.tab3_enquiry_details:
                st.subheader(f"Working with Enquiry for {st.session_state.tab3_client_name}: {st.session_state.tab3_enquiry_details['destination']} (ID: {active_enquiry_id_tab3[:8]}...)")
                cols_details_tab3 = st.columns(2)
                with cols_details_tab3[0]:
                    st.markdown(f"""
                        - **Destination:** {st.session_state.tab3_enquiry_details['destination']}
                        - **Days:** {st.session_state.tab3_enquiry_details['num_days']}
                        - **Travelers:** {st.session_state.tab3_enquiry_details['traveler_count']}
                    """)
                with cols_details_tab3[1]:
                     st.markdown(f"""
                        - **Trip Type:** {st.session_state.tab3_enquiry_details['trip_type']}
                        - **Status:** {st.session_state.tab3_enquiry_details.get('status', 'New')}
                    """)

                # Display Itinerary Info
                itinerary_display_text = st.session_state.tab3_itinerary_info.get('text', "No itinerary information.")
                if itinerary_display_text not in ["No itinerary generated yet.", "No itinerary found in database for this enquiry.", "No itinerary information."]:
                    with st.expander("View AI Generated Itinerary/Suggestions", expanded=False):
                        st.markdown(itinerary_display_text)
                else:
                    st.caption(itinerary_display_text)


                st.markdown("---")
                st.subheader("‚úçÔ∏è Add/View Vendor Reply")
                current_vendor_reply_text = st.session_state.tab3_vendor_reply_info.get('text', "") if st.session_state.tab3_vendor_reply_info else ""
                if current_vendor_reply_text:
                    with st.expander("View Current Vendor Reply", expanded=False):
                        st.text_area("Existing Vendor Reply", value=current_vendor_reply_text, height=150, disabled=True, key=f"disp_vendor_reply_tab3_{active_enquiry_id_tab3}")
                else:
                    st.caption("No vendor reply submitted yet for this enquiry.")

                with st.form(key=f"vendor_reply_form_tab3_{active_enquiry_id_tab3}"):
                    vendor_reply_text_input = st.text_area("Vendor Reply Text (Pricing, Inclusions, etc.)", height=200, key=f"new_vendor_reply_text_tab3_{active_enquiry_id_tab3}", value=current_vendor_reply_text)
                    submitted_vendor_reply = st.form_submit_button("Submit/Update Vendor Reply")

                    if submitted_vendor_reply:
                        if not vendor_reply_text_input: st.error("Vendor reply text cannot be empty.")
                        else:
                            with st.spinner("Saving vendor reply..."):
                                reply_data, error_msg_reply_add = add_vendor_reply(active_enquiry_id_tab3, vendor_reply_text_input)
                                if reply_data:
                                    st.session_state.vendor_reply_saved_success_message = f"Vendor reply saved successfully for enquiry ID: {active_enquiry_id_tab3[:8]}..."
                                    st.session_state.tab3_vendor_reply_info = {'text': reply_data['reply_text'], 'id': reply_data['id'], 'enquiry_id_loaded_for': active_enquiry_id_tab3}
                                    # Reset quotation states as vendor reply is critical input
                                    st.session_state.tab3_quotation_pdf_bytes = None
                                    st.session_state.tab3_quotation_docx_bytes = None
                                    st.session_state.tab3_current_quotation_db_id = None 
                                    st.session_state.tab3_current_pdf_storage_path = None
                                    st.session_state.tab3_current_docx_storage_path = None
                                    st.session_state.show_quotation_success_tab3 = False
                                    st.rerun()
                                else: st.error(f"Failed to save vendor reply. {error_msg_reply_add or 'Unknown error'}")
                
                st.markdown("---")
                st.subheader(f"üìÑ AI Quotation Generation (using {st.session_state.selected_ai_provider})")
                vendor_reply_available = st.session_state.tab3_vendor_reply_info and st.session_state.tab3_vendor_reply_info.get('text')
                if not vendor_reply_available: st.warning("A vendor reply is required to generate quotations.")
                generate_quotation_disabled = not (vendor_reply_available and st.session_state.tab3_enquiry_details)

                col1_gen, col2_gen = st.columns(2)
                # --- PDF GENERATION ---
                with col1_gen:
                    if st.button(f"Generate Quotation PDF", disabled=generate_quotation_disabled, key="generate_pdf_btn_tab3"): # Simpler label
                        st.session_state.tab3_quotation_pdf_bytes = None 
                        st.session_state.show_quotation_success_tab3 = False
                        # No need to reset st.session_state.tab3_current_quotation_db_id here,
                        # add_quotation will create a new record, or update_quotation will use existing.
                        # Let's always create a new quotation record on explicit "Generate" to version it.

                        with st.spinner(f"Generating PDF data with {st.session_state.selected_ai_provider}..."):
                            current_enquiry_details_for_gen = st.session_state.tab3_enquiry_details.copy()
                            current_enquiry_details_for_gen["client_name_actual"] = st.session_state.tab3_client_name
                            current_enquiry_details_for_gen["itinerary_text_from_ui"] = st.session_state.tab3_itinerary_info.get('text', "Not available")
                            pdf_bytes_output, structured_data_dict = run_quotation_generation_graph(
                                current_enquiry_details_for_gen, st.session_state.tab3_vendor_reply_info['text'], st.session_state.selected_ai_provider
                            )
                        
                        if structured_data_dict and not structured_data_dict.get("error"):
                            is_error_pdf_content = b"Error generating PDF" in pdf_bytes_output or b"Quotation Generation Failed" in pdf_bytes_output
                            if pdf_bytes_output and not is_error_pdf_content and len(pdf_bytes_output) > 1000:
                                st.session_state.tab3_quotation_pdf_bytes = pdf_bytes_output
                                pdf_path_for_db = None
                                with st.spinner("Uploading PDF to cloud storage..."):
                                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                                    fn = f"{active_enquiry_id_tab3}/quotation_PDF_{timestamp}_{uuid.uuid4().hex[:6]}.pdf"
                                    pdf_path_for_db, upload_err = upload_file_to_storage(QUOTATIONS_BUCKET_NAME, fn, pdf_bytes_output, "application/pdf")
                                if upload_err: st.error(f"PDF generated, but failed to upload: {upload_err}")
                                else: st.session_state.tab3_current_pdf_storage_path = pdf_path_for_db # Update session path

                                with st.spinner("Saving quotation data to database..."):
                                    q_data, q_error = add_quotation(
                                        active_enquiry_id_tab3, structured_data_dict, 
                                        st.session_state.tab3_itinerary_info.get('id'), 
                                        st.session_state.tab3_vendor_reply_info.get('id'),
                                        pdf_storage_path=pdf_path_for_db, # Use path from upload
                                        docx_storage_path=None # DOCX not generated yet in this flow
                                    )
                                    if q_error: st.error(f"Failed to save PDF quotation data: {q_error}")
                                    else:
                                        st.session_state.tab3_current_quotation_db_id = q_data['id'] # Store new DB ID
                                        st.session_state.vendor_reply_saved_success_message = "Quotation PDF generated, uploaded, and data saved!"
                                        st.session_state.show_quotation_success_tab3 = True # For general UI feedback
                                        st.rerun() # Rerun to show message and refresh stored links
                            else: 
                                st.session_state.tab3_quotation_pdf_bytes = pdf_bytes_output
                                st.error("Failed to generate a valid PDF. Error PDF might be available.")
                        else:
                            err = structured_data_dict.get('error',"Unknown") if structured_data_dict else "Graph error"
                            st.error(f"Failed to structure data for PDF: {err}")
                            if structured_data_dict and structured_data_dict.get('raw_output'): st.expander("Raw LLM Output").text(structured_data_dict['raw_output'])
                            if pdf_bytes_output: st.session_state.tab3_quotation_pdf_bytes = pdf_bytes_output


                # --- DOCX GENERATION ---
                with col2_gen:
                    if st.button(f"Generate Quotation DOCX", disabled=generate_quotation_disabled, key="generate_docx_btn_tab3"):
                        st.session_state.tab3_quotation_docx_bytes = None
                        with st.spinner(f"Generating DOCX data with {st.session_state.selected_ai_provider}..."):
                            current_enquiry_details_for_gen = st.session_state.tab3_enquiry_details.copy()
                            current_enquiry_details_for_gen["client_name_actual"] = st.session_state.tab3_client_name
                            current_enquiry_details_for_gen["itinerary_text_from_ui"] = st.session_state.tab3_itinerary_info.get('text', "Not available")
                            pdf_bytes_for_docx, structured_data_dict_docx = run_quotation_generation_graph(
                                current_enquiry_details_for_gen, st.session_state.tab3_vendor_reply_info['text'], st.session_state.selected_ai_provider
                            )

                        if structured_data_dict_docx and not structured_data_dict_docx.get("error"):
                            is_error_pdf_content_docx = b"Error generating PDF" in pdf_bytes_for_docx or b"Quotation Generation Failed" in pdf_bytes_for_docx
                            if pdf_bytes_for_docx and not is_error_pdf_content_docx and len(pdf_bytes_for_docx) > 1000:
                                with st.spinner("Converting PDF to DOCX..."):
                                    docx_bytes_output = convert_pdf_bytes_to_docx_bytes(pdf_bytes_for_docx)
                                if docx_bytes_output:
                                    st.session_state.tab3_quotation_docx_bytes = docx_bytes_output
                                    docx_path_for_db = None
                                    with st.spinner("Uploading DOCX to cloud storage..."):
                                        ts_docx = datetime.now().strftime("%Y%m%d_%H%M%S")
                                        fn_docx = f"{active_enquiry_id_tab3}/quotation_DOCX_{ts_docx}_{uuid.uuid4().hex[:6]}.docx"
                                        docx_path_for_db, up_err_docx = upload_file_to_storage(QUOTATIONS_BUCKET_NAME, fn_docx, docx_bytes_output, "application/vnd.openxmlformats-officedocument.wordprocessingml.document")
                                    if up_err_docx: st.error(f"DOCX generated, but failed to upload: {up_err_docx}")
                                    else: st.session_state.tab3_current_docx_storage_path = docx_path_for_db # Update session

                                    with st.spinner("Saving/updating DOCX quotation data..."):
                                        # If a PDF was generated in this session and has a DB ID, update it. Otherwise, create new.
                                        if st.session_state.tab3_current_quotation_db_id:
                                            _, upd_err = update_quotation_storage_path(st.session_state.tab3_current_quotation_db_id, 'docx_storage_path', docx_path_for_db)
                                            if upd_err: st.error(f"Failed to update DOCX path in DB: {upd_err}")
                                            else: 
                                                st.session_state.vendor_reply_saved_success_message = "DOCX generated, uploaded, and DB record updated!"
                                                st.rerun()
                                        else: # Create new record if no PDF was made first or if its DB save failed
                                            q_data_dx, q_err_dx = add_quotation(
                                                active_enquiry_id_tab3, structured_data_dict_docx, 
                                                st.session_state.tab3_itinerary_info.get('id'), 
                                                st.session_state.tab3_vendor_reply_info.get('id'),
                                                pdf_storage_path=None, # Assuming no PDF path if we are here without one
                                                docx_storage_path=docx_path_for_db
                                            )
                                            if q_err_dx: st.error(f"Failed to save DOCX quotation data: {q_err_dx}")
                                            else:
                                                st.session_state.tab3_current_quotation_db_id = q_data_dx['id']
                                                st.session_state.vendor_reply_saved_success_message = "DOCX generated, uploaded, and new data record saved!"
                                                st.rerun()
                                else: st.error("Failed to convert PDF to DOCX.") # docx_bytes_output is None
                            else: 
                                st.error("Could not generate underlying PDF for DOCX conversion.")
                                if pdf_bytes_for_docx: st.download_button("Download Intermediate Error PDF", pdf_bytes_for_docx, "Error_PDF_for_DOCX.pdf", "application/pdf", key="err_pdf_docx")
                        else:
                            err_dx = structured_data_dict_docx.get('error',"Unknown") if structured_data_dict_docx else "Graph error"
                            st.error(f"Failed to structure data for DOCX: {err_dx}")
                            if structured_data_dict_docx and structured_data_dict_docx.get('raw_output'): st.expander("Raw LLM Output (DOCX)").text(structured_data_dict_docx['raw_output'])
                
                # --- DOWNLOAD/VIEW STORED FILES SECTION ---
                st.markdown("---")
                st.subheader("Download/View Quotation Files")
                
                has_any_file_info = False
                dl_col1_show, dl_col2_show = st.columns(2)

                with dl_col1_show:
                    st.markdown("**PDF Document**")
                    # Link to stored PDF (from DB fetch or recent generation)
                    pdf_path_to_show = st.session_state.get('tab3_current_pdf_storage_path')
                    if pdf_path_to_show:
                        has_any_file_info = True
                        pdf_public_url = get_public_url(QUOTATIONS_BUCKET_NAME, pdf_path_to_show)
                        if pdf_public_url: st.markdown(f"[:cloud: View/Download Stored PDF]({pdf_public_url})", unsafe_allow_html=True)
                        else:
                            signed_url_pdf, err_sign_pdf = create_signed_url(QUOTATIONS_BUCKET_NAME, pdf_path_to_show)
                            if signed_url_pdf: st.markdown(f"[:lock: Download Stored PDF (Signed URL)]({signed_url_pdf})", unsafe_allow_html=True)
                            elif err_sign_pdf: st.caption(f"URL Error: {err_sign_pdf}")
                    else:
                        st.caption("No PDF stored for latest quotation.")

                    # Download button for locally generated PDF (current session only)
                    if st.session_state.get('tab3_quotation_pdf_bytes'):
                        has_any_file_info = True
                        st.download_button(
                            label="Download Locally Generated PDF", data=st.session_state.tab3_quotation_pdf_bytes,
                            file_name=f"Local_PDF_{st.session_state.tab3_enquiry_details.get('destination','Q')}_{active_enquiry_id_tab3[:4]}.pdf",
                            mime="application/pdf", key="local_dl_pdf"
                        )

                with dl_col2_show:
                    st.markdown("**DOCX Document**")
                    docx_path_to_show = st.session_state.get('tab3_current_docx_storage_path')
                    if docx_path_to_show:
                        has_any_file_info = True
                        docx_public_url = get_public_url(QUOTATIONS_BUCKET_NAME, docx_path_to_show)
                        if docx_public_url: st.markdown(f"[:cloud: View/Download Stored DOCX]({docx_public_url})", unsafe_allow_html=True)
                        else:
                            signed_url_docx, err_sign_docx = create_signed_url(QUOTATIONS_BUCKET_NAME, docx_path_to_show)
                            if signed_url_docx: st.markdown(f"[:lock: Download Stored DOCX (Signed URL)]({signed_url_docx})", unsafe_allow_html=True)
                            elif err_sign_docx: st.caption(f"URL Error: {err_sign_docx}")
                    else:
                        st.caption("No DOCX stored for latest quotation.")
                    
                    if st.session_state.get('tab3_quotation_docx_bytes'):
                        has_any_file_info = True
                        st.download_button(
                            label="Download Locally Generated DOCX", data=st.session_state.tab3_quotation_docx_bytes,
                            file_name=f"Local_DOCX_{st.session_state.tab3_enquiry_details.get('destination','Q')}_{active_enquiry_id_tab3[:4]}.docx",
                            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document", key="local_dl_docx"
                        )
                
                if not has_any_file_info:
                    st.info("No quotation files available. Use 'Generate' buttons to create them.")

            else: # if not st.session_state.tab3_enquiry_details
                 st.error(f"Could not load details for the selected enquiry (ID: {active_enquiry_id_tab3[:8]}...).")
        else: # if not st.session_state.selected_enquiry_id_tab3
            st.info("Select an enquiry to manage its vendor reply and quotation.")